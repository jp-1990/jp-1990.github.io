{"version":3,"sources":["components/Nav/NavItems/NavItem/NavItem.module.css","components/Nav/NavItems/NavItems.module.css","components/Nav/Toolbar/Toolbar.module.css","components/Nav/NavItems/NavItem/NavItem.js","components/Nav/NavItems/NavItems.js","components/Nav/Toolbar/Toolbar.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navItem","props","className","classes","NavItem","href","children","navItems","NavItems","toolbar","Toolbar","layout","App","Layout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,QAAU,2B,uJCUbC,EARC,SAACC,GACf,OACE,wBAAIC,UAAWC,IAAQC,SACrB,uBAAGC,KAAK,KAAKJ,EAAMK,Y,gBCOVC,EATE,WACf,OACE,wBAAIL,UAAWC,IAAQK,UACrB,kBAACJ,EAAD,cACA,kBAACA,EAAD,iBACA,kBAACA,EAAD,iB,gBCOSK,EAZC,WACd,OACE,gCACE,yBAAKP,UAAWC,IAAQO,SACtB,6BACE,kBAACF,EAAD,UCGKG,EATA,SAACV,GACd,OACE,oCACE,kBAACS,EAAD,MACA,8BAAOT,EAAMK,YCOJM,EAXH,WACV,OACE,kBAACC,EAAD,KACE,qCACA,yCACA,sCACA,yCCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7151204.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavItem\":\"NavItem_NavItem__52eZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavItems\":\"NavItems_NavItems__1kEs0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__x9R7c\"};","import React from 'react';\r\nimport classes from './NavItem.module.css';\r\n\r\nconst navItem = (props) => {\r\n  return (\r\n    <li className={classes.NavItem}>\r\n      <a href='/'>{props.children}</a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default navItem;\r\n","import React from 'react';\r\nimport NavItem from './NavItem/NavItem';\r\nimport classes from './NavItems.module.css';\r\n\r\nconst navItems = () => {\r\n  return (\r\n    <ul className={classes.NavItems}>\r\n      <NavItem>About</NavItem>\r\n      <NavItem>Projects</NavItem>\r\n      <NavItem>Skills</NavItem>\r\n    </ul>\r\n  );\r\n};\r\nexport default navItems;\r\n","import React from 'react';\r\nimport NavItems from '../NavItems/NavItems';\r\nimport classes from './Toolbar.module.css';\r\n\r\nconst toolbar = () => {\r\n  return (\r\n    <header>\r\n      <div className={classes.Toolbar}>\r\n        <nav>\r\n          <NavItems />\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default toolbar;\r\n","import React from 'react';\r\nimport Toolbar from '../Nav/Toolbar/Toolbar';\r\n\r\nconst layout = (props) => {\r\n  return (\r\n    <>\r\n      <Toolbar />\r\n      <main>{props.children}</main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default layout;\r\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\n\nconst App = () => {\n  return (\n    <Layout>\n      <div>HERO</div>\n      <div>PROJECTS</div>\n      <div>ABOUT</div>\n      <div>SKILLS</div>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}